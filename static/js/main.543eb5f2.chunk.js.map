{"version":3,"sources":["data/banks.ts","components/Volume.tsx","components/Button.tsx","components/DrumMachine.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["banks","bankOne","keyCode","keyTrigger","id","url","bankTwo","Volume","volume","setVolume","className","type","min","max","value","step","onChange","e","Number","target","Button","item","setInfo","audioEl","React","useRef","buttonEl","handleClick","useCallback","current","play","handleKeyDown","focus","useEffect","document","addEventListener","removeEventListener","ref","onClick","style","display","src","DrumMachine","useState","name","data","bank","setBank","info","handleChangeBank","map","key","minWidth","label","bankData","checked","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.543eb5f2.chunk.js","sourcesContent":["import Bank from '../models/Bank'\r\n\r\nconst banks: {\r\n    bankOne: Bank[],\r\n    bankTwo: Bank[]\r\n} = {\r\n  bankOne: [\r\n    {\r\n      keyCode: 81,\r\n      keyTrigger: 'Q',\r\n      id: 'Heater-1',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n    },\r\n    {\r\n      keyCode: 87,\r\n      keyTrigger: 'W',\r\n      id: 'Heater-2',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n    },\r\n    {\r\n      keyCode: 69,\r\n      keyTrigger: 'E',\r\n      id: 'Heater-3',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n    },\r\n    {\r\n      keyCode: 65,\r\n      keyTrigger: 'A',\r\n      id: 'Heater-4',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n    },\r\n    {\r\n      keyCode: 83,\r\n      keyTrigger: 'S',\r\n      id: 'Clap',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n    },\r\n    {\r\n      keyCode: 68,\r\n      keyTrigger: 'D',\r\n      id: 'Open-HH',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n    },\r\n    {\r\n      keyCode: 90,\r\n      keyTrigger: 'Z',\r\n      id: 'Kick-n\\'-Hat',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n    },\r\n    {\r\n      keyCode: 88,\r\n      keyTrigger: 'X',\r\n      id: 'Kick',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n    },\r\n    {\r\n      keyCode: 67,\r\n      keyTrigger: 'C',\r\n      id: 'Closed-HH',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n    }\r\n  ],\r\n  bankTwo: [\r\n    {\r\n      keyCode: 81,\r\n      keyTrigger: 'Q',\r\n      id: 'Chord-1',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\r\n    },\r\n    {\r\n      keyCode: 87,\r\n      keyTrigger: 'W',\r\n      id: 'Chord-2',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\r\n    },\r\n    {\r\n      keyCode: 69,\r\n      keyTrigger: 'E',\r\n      id: 'Chord-3',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\r\n    },\r\n    {\r\n      keyCode: 65,\r\n      keyTrigger: 'A',\r\n      id: 'Shaker',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\r\n    },\r\n    {\r\n      keyCode: 83,\r\n      keyTrigger: 'S',\r\n      id: 'Open-HH',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\r\n    },\r\n    {\r\n      keyCode: 68,\r\n      keyTrigger: 'D',\r\n      id: 'Closed-HH',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    },\r\n    {\r\n      keyCode: 90,\r\n      keyTrigger: 'Z',\r\n      id: 'Punchy-Kick',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\r\n    },\r\n    {\r\n      keyCode: 88,\r\n      keyTrigger: 'X',\r\n      id: 'Side-Stick',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\r\n    },\r\n    {\r\n      keyCode: 67,\r\n      keyTrigger: 'C',\r\n      id: 'Snare',\r\n      url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\r\n    }\r\n  ]\r\n}\r\n\r\nexport default banks\r\n","import React, { ChangeEvent } from 'react'\r\nimport './Volume.css'\r\n\r\ntype VolumeProps = {\r\n  volume: number\r\n  setVolume: (value: number) => void\r\n}\r\n\r\nconst Volume: React.FC<VolumeProps> = ({ volume, setVolume }: VolumeProps) => {\r\n  return (\r\n    <div className='Volume control'>\r\n      <label>\r\n        <input\r\n          type='range'\r\n          min='0'\r\n          max='1'\r\n          value={volume}\r\n          step='0.05'\r\n          onChange={(e: ChangeEvent<HTMLInputElement>) => setVolume(Number(e.target.value))}\r\n        /> Volume: {volume}\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Volume\r\n","import React from 'react'\r\nimport Bank from '../models/Bank'\r\n\r\ntype ButtonProps = {\r\n  item: Bank\r\n  setInfo: (value: string) => void\r\n  volume: number\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ item, setInfo, volume }: ButtonProps) => {\r\n  const audioEl = React.useRef<HTMLAudioElement | null>(null)\r\n  const buttonEl = React.useRef<HTMLButtonElement | null>(null)\r\n  const handleClick = React.useCallback(() => {\r\n    if (audioEl && audioEl.current) {\r\n      audioEl.current.play()\r\n    }\r\n\r\n    setInfo(item.id)\r\n  }, [item, setInfo, audioEl])\r\n  const handleKeyDown = React.useCallback(\r\n    (e) => {\r\n      if (e.keyCode === item.keyCode) {\r\n        handleClick()\r\n\r\n        if (buttonEl && buttonEl.current) {\r\n          buttonEl.current.focus()\r\n        }\r\n      }\r\n    },\r\n    [item, handleClick, buttonEl]\r\n  )\r\n\r\n  React.useEffect(() => {\r\n    document.addEventListener('keydown', handleKeyDown)\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown)\r\n    }\r\n  }, [handleKeyDown])\r\n  React.useEffect(() => {\r\n    if (audioEl && audioEl.current) {\r\n      audioEl.current.volume = volume\r\n    }\r\n  }, [volume, audioEl])\r\n\r\n  return (\r\n    <button\r\n      className='Button drum-pad button is-rounded is-large is-primary'\r\n      id={item.keyTrigger}\r\n      ref={buttonEl}\r\n      onClick={handleClick}\r\n    >\r\n      {item.keyTrigger}\r\n      <audio\r\n        className='clip'\r\n        id={item.keyTrigger}\r\n        style={{ display: 'none' }}\r\n        src={item.url}\r\n        ref={audioEl}\r\n      />\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport './DrumMachine.css'\r\nimport Bank from '../models/Bank'\r\nimport banks from '../data/banks'\r\nimport Volume from './Volume'\r\nimport Button from './Button'\r\n\r\ntype BankName = 'bankOne' | 'bankTwo'\r\n\r\nconst DrumMachine = () => {\r\n  const [bank, setBank] = useState<{name: BankName, data: Bank[]}>({\r\n    name: 'bankOne',\r\n    data: banks.bankOne\r\n  })\r\n  const [info, setInfo] = useState<string | null>(null)\r\n  const [volume, setVolume] = useState(0.75)\r\n  const bankChangeData: {value: BankName, label: string}[] = [\r\n    {\r\n      value: 'bankOne',\r\n      label: 'Sound set #1'\r\n    },\r\n    {\r\n      value: 'bankTwo',\r\n      label: 'Sound set #2'\r\n    }\r\n  ]\r\n  const handleChangeBank = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setBank({\r\n      name: e.target.value as BankName,\r\n      data: banks[e.target.value as BankName]\r\n    })\r\n    setInfo(null)\r\n  }\r\n\r\n  return (\r\n    <div className='box DrumMachine' id='drum-machine'>\r\n      <div className='columns'>\r\n        <div className='column'>\r\n          <div className='DrumMachine__buttons'>\r\n            {bank.data.map((item) => (\r\n              <div className='DrumMachine__button'\r\n                key={item.id}>\r\n                <Button\r\n                  item={item}\r\n                  setInfo={setInfo}\r\n                  volume={volume}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className='column'>\r\n          <div\r\n            id='display'\r\n            style={{ minWidth: '10rem' }}\r\n            className='tag is-large'\r\n          >\r\n            {info}\r\n          </div>\r\n          <div className='DrumMachine__volume'>\r\n            <Volume volume={volume} setVolume={setVolume} />\r\n          </div>\r\n          <div className='control'>\r\n            {bankChangeData.map(bankData => (\r\n              <label className='radio'\r\n                key={bankData.value}>\r\n                <input\r\n                  type='radio'\r\n                  checked={bank.name === bankData.value}\r\n                  value={bankData.value}\r\n                  onChange={handleChangeBank}\r\n                /> {bankData.label}\r\n              </label>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DrumMachine\r\n","import React from 'react'\nimport './App.css'\nimport DrumMachine from './components/DrumMachine'\n\nfunction App () {\n  return (\n    <div className='app'>\n      <DrumMachine />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'bulma/css/bulma.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}